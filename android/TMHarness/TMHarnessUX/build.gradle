apply plugin: 'com.android.application'

android {
    //mbgl props dictates various aspects of build configs so we parse/validate it first
    def mbglPropsFile = file('mbgl.properties')
    Properties mbglProps = null
    String mbglapi_access_token = null
    Integer mbgl_http_max_requests_per_host = null
    Integer mbgl_http_connect_timeout = null
    Integer mbgl_http_read_timeout = null
    Integer mbgl_http_cache_size = null
    Boolean mbgl_test_extern_mvt_server = null
    String mbgl_test_extern_mvt_server_root_url = null
    String mbgl_test_extern_mvt_server_endpoint = null
    Boolean mbgl_debug_active = null
    if (mbglPropsFile.canRead()) {
        mbglProps = new Properties()
        mbglProps.load(new FileInputStream(mbglPropsFile))

        //REQUIRED PARAMS
        mbglapi_access_token = mbglProps['api_access_token']
        if (mbglapi_access_token == null)
            throw new GradleException("failed read: mbgl.properties 'api_access_token' value is required")
        if (mbglapi_access_token.compareTo("YOUR_MAPBOX_API_ACCESS_TOKEN") == 0)
            throw new GradleException("mbgl.properties 'api_access_token' value not set! Please visit https://www.mapbox.com/account/access-tokens/ to create one and then set it in mbgl.properties file")

        String s_mbgl_http_connect_timeout = mbglProps['http_connect_timeout']
        if (s_mbgl_http_connect_timeout == null)
            throw new GradleException("failed read: mbgl.properties 'http_connect_timeout' value is required")
        mbgl_http_connect_timeout = Integer.valueOf(s_mbgl_http_connect_timeout)
        String s_mbgl_http_max_requests_per_host = mbglProps['http_max_requests_per_host']
        if (s_mbgl_http_max_requests_per_host == null)
            throw new GradleException("failed read: mbgl.properties 'http_max_requests_per_host' value is required")
        mbgl_http_max_requests_per_host = Integer.valueOf(s_mbgl_http_max_requests_per_host)
        String s_mbgl_http_read_timeout = mbglProps['http_read_timeout']
        if (s_mbgl_http_read_timeout == null)
            throw new GradleException("failed read: mbgl.properties 'http_read_timeout' value is required")
        mbgl_http_read_timeout = Integer.valueOf(s_mbgl_http_read_timeout)
        String s_mbgl_http_cache_size = mbglProps['http_cache_size']
        if (s_mbgl_http_cache_size == null)
            throw new GradleException("failed read: mbgl.properties 'http_cache_size' value is required")
        mbgl_http_cache_size = Integer.valueOf(s_mbgl_http_cache_size)

        //OPTIONAL PARAMS
        String s_test_extern_mvt_server = mbglProps['test_extern_mvt_server']
        mbgl_test_extern_mvt_server = s_test_extern_mvt_server != null ? Boolean.valueOf(s_test_extern_mvt_server) : false
        mbgl_test_extern_mvt_server_root_url = mbglProps['test_extern_mvt_server_root_url']
        if (mbgl_test_extern_mvt_server_root_url == null)
            mbgl_test_extern_mvt_server_root_url = ""
        mbgl_test_extern_mvt_server_endpoint = mbglProps['test_extern_mvt_server_endpoint']
        if (mbgl_test_extern_mvt_server_endpoint == null)
            mbgl_test_extern_mvt_server_endpoint = ""
        String s_mbgl_debug_active = mbglProps['debug_active']
        mbgl_debug_active = s_mbgl_debug_active != null ? Boolean.valueOf(s_mbgl_debug_active) : false
    } else
        throw new GradleException("Could not read mbgl.properties!")

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        buildConfigField "String", "mbglapi_access_token", "\"" + mbglapi_access_token + "\""
        buildConfigField "int", "mbgl_http_max_requests_per_host", mbgl_http_max_requests_per_host.toString()
        buildConfigField "int", "mbgl_http_connect_timeout", mbgl_http_connect_timeout.toString()
        buildConfigField "int", "mbgl_http_read_timeout", mbgl_http_read_timeout.toString()
        buildConfigField "int", "mbgl_http_cache_size", mbgl_http_cache_size.toString()
        buildConfigField "boolean", "mbgl_test_extern_mvt_server", mbgl_test_extern_mvt_server.toString()
        buildConfigField "String", "mbgl_test_extern_mvt_server_root_url", "\"" + mbgl_test_extern_mvt_server_root_url + "\""
        buildConfigField "String", "mbgl_test_extern_mvt_server_endpoint", "\"" + mbgl_test_extern_mvt_server_endpoint + "\""
        buildConfigField "boolean", "mbgl_debug_active", mbgl_debug_active.toString()
    }

    buildTypes {
        release {
            buildConfigField "boolean", "mbgl_test_extern_mvt_server", "false"
            buildConfigField "String", "mbgl_test_extern_mvt_server_root_url", "\"\""
            buildConfigField "String", "mbgl_test_extern_mvt_server_endpoint", "\"\""
            buildConfigField "boolean", "mbgl_debug_active", "false"

            debuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            minifyEnabled false
            shrinkResources false
        }
        debug_proguard {
            initWith debug

            signingConfig signingConfigs.debug

            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.debug.pro'

            matchingFallbacks = ['debug', 'release']
        }
    }

    productFlavors {
    }

    compileSdkVersion 27
    buildToolsVersion '27.0.3'
    def versionPropsFile = file('version.properties')
    def vName = "_unknown_"
    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))

        def vCode = versionProps['VERSION_CODE'].toInteger()
        def vMajor = versionProps['VERSION_MAJOR'].toInteger()
        def vMinor = versionProps['VERSION_MINOR'].toInteger()
        def vSubMinor = versionProps['VERSION_SUBMINOR'].toInteger()
        def vBuild = versionProps['VERSION_BUILD'].toInteger()

        List<String> runTasks = gradle.startParameter.getTaskNames();

        def b_isassemble = false
        def assemble_type = "_unknown_"
        for (String rt : runTasks) {
            println "current runTask: \"" + rt + "\""
            if (rt.contains("assemble")) {    //only rev. build and code numbers for assemble tasks
                b_isassemble = true
                vBuild++
                if (rt.contains("Debug_proguard")) {
                    println "assemble_type is: debug_proguard"
                    assemble_type = "debug_proguard"
                } else if (rt.contains("Debug")) {
                    println "assemble_type is: debug"
                    assemble_type = "debug"
                } else if (rt.contains("Release")) {
                    println "assemble_type is: release"
                    assemble_type = "release"
                }
            }
        }
        vName = vMajor + "." + vMinor + "." + vSubMinor + "." + vBuild
        if (b_isassemble) {
            project.logger.lifecycle("Assembling new " + assemble_type + " version " + vName.toString())
        }

        versionProps['VERSION_CODE'] = vCode.toString()
        versionProps['VERSION_MAJOR'] = vMajor.toString()
        versionProps['VERSION_MINOR'] = vMinor.toString()
        versionProps['VERSION_SUBMINOR'] = vSubMinor.toString()
        versionProps['VERSION_BUILD'] = vBuild.toString()
        versionProps.store(versionPropsFile.newWriter(), null)

        def base_archive_name = "tegolamobile"
        defaultConfig {
            applicationId "go_spatial.com.github.tegola.mobile.android.ux"
            versionCode vCode
            versionName vName
            archivesBaseName = base_archive_name
            minSdkVersion 16
            targetSdkVersion 27
            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        }

        applicationVariants.all { variant ->
            variant.outputs.all {
                outputFileName = base_archive_name + "-" + vName + "-" + variant.buildType.name + ".apk"
            }
        }
    } else {
        throw new GradleException("Could not read version.properties!")
    }
}

dependencies {
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation 'junit:junit:4.12'

    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation 'com.android.support:support-v4:27.1.1'
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.0'

    implementation project(':TMControllerSvc')

    //see https://github.com/AAkira/ExpandableLayout
    implementation 'com.github.aakira:expandable-layout:1.6.0@aar'
    //locally compiled version of forked https://github.com/iPaulPro/aFileChooser
    implementation(name: 'lib-aFileChooser-release', ext: 'aar') {
        transitive = true;
    }
    //only import Google Drive API vs. the entire Google Play Services bundle
    //implementation 'com.google.android.gms:play-services-drive:11.0.4'
    implementation 'com.squareup.okhttp3:okhttp:3.10.0'
    implementation 'com.mapbox.mapboxsdk:mapbox-android-sdk:6.1.3'
}

repositories {
    flatDir {
        dirs 'libs'
    }
}
