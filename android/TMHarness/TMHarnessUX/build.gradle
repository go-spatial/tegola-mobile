apply plugin: 'com.android.application'

android {
    /*
    signingConfigs {
        signing_config_debug {
            storeFile file('C:/Users/Steven/.android/debug.keystore')
            storePassword 'android'
        }
    }
    */
    compileSdkVersion 26
    buildToolsVersion '27.0.3'
    def versionPropsFile = file('version.properties')
    def vName = "_unknown_"
    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))

        def vCode = versionProps['VERSION_CODE'].toInteger()
        def vMajor = versionProps['VERSION_MAJOR'].toInteger()
        def vMinor = versionProps['VERSION_MINOR'].toInteger()
        def vSubMinor = versionProps['VERSION_SUBMINOR'].toInteger()
        def vBuild = versionProps['VERSION_BUILD'].toInteger()

        List<String> runTasks = gradle.startParameter.getTaskNames();

        def b_isassemble = false
        def assemble_type = "_unknown_"
        for (String rt : runTasks) {
            if (rt.contains("assemble")) {    //only rev. build and code numbers for assemble tasks
                b_isassemble = true
                vBuild++
                if (rt.contains("Debug")) {
                    assemble_type = "debug"
                } else if (rt.contains("Release")) {
                    assemble_type = "release"
                }
            }
        }
        vName = vMajor + "." + vMinor + "." + vSubMinor + "." + vBuild
        if (b_isassemble) {
            project.logger.lifecycle("Assembling new " + assemble_type + " version " + vName.toString())
        }

        versionProps['VERSION_CODE'] = vCode.toString()
        versionProps['VERSION_MAJOR'] = vMajor.toString()
        versionProps['VERSION_MINOR'] = vMinor.toString()
        versionProps['VERSION_SUBMINOR'] = vSubMinor.toString()
        versionProps['VERSION_BUILD'] = vBuild.toString()
        versionProps.store(versionPropsFile.newWriter(), null)

        def base_archive_name = "tegolamobile"
        defaultConfig {
            applicationId "go_spatial.com.github.tegola.mobile.android.ux"
            versionCode vCode
            versionName vName
            archivesBaseName = base_archive_name
            minSdkVersion 16
            targetSdkVersion 26
            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        }

        applicationVariants.all { variant ->
            variant.outputs.all {
                outputFileName = base_archive_name + "-" + vName + "-" + variant.buildType.name + ".apk"
            }
        }
    } else {
        throw new GradleException("Could not read version.properties!")
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
        }
    }
    defaultConfig {
    }
    productFlavors {
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.android.support:support-v4:26.1.0'
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    implementation 'com.android.support:appcompat-v7:26.1.0'

    //see https://github.com/AAkira/ExpandableLayout
    implementation 'com.github.aakira:expandable-layout:1.6.0@aar'

    //locally compiled version of forked https://github.com/iPaulPro/aFileChooser
    implementation(name: 'lib-aFileChooser-release', ext: 'aar') {
        transitive = true;
    }

    //only import Google Drive API vs. the entire Google Play Services bundle
    //implementation 'com.google.android.gms:play-services-drive:11.0.4'

    implementation project(':TMControllerSvc')

    implementation 'com.squareup.okhttp3:okhttp:3.10.0'

    testImplementation 'junit:junit:4.12'
}




repositories {
    flatDir {
        dirs 'libs'
    }
}