apply plugin: 'com.android.application'

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
    }

    aaptOptions {
        cruncherEnabled = false
    }

    // This enables long timeouts required on slow environments, e.g. Travis
    int adb_timeout_min = 10
    adbOptions {
        timeOutInMs adb_timeout_min * 60 * 1000
        installOptions "-d","-t"
    }

    def vName = "_unknown_"
    def vCode = "_unknown_"
    def vMajor = "_unknown_"
    def vMinor = "_unknown_"
    def vSubMinor = "_unknown_"
    def vBuild = "_unknown_"
    def versionPropsFile = file('version.properties')
    Properties versionProps = new Properties()
    if (versionPropsFile.canRead()) {
        versionProps.load(new FileInputStream(versionPropsFile))

        vCode = versionProps['VERSION_CODE'].toInteger()
        vMajor = versionProps['VERSION_MAJOR'].toInteger()
        vMinor = versionProps['VERSION_MINOR'].toInteger()
        vSubMinor = versionProps['VERSION_SUBMINOR'].toInteger()
        vBuild = versionProps['VERSION_BUILD'].toInteger()

        def b_isassemble = false
        def assemble_type = "_unknown_"
        List<String> runTasks = gradle.startParameter.getTaskNames()
        for (String rt : runTasks) {
            println "start runTask: \"" + rt + "\""
            if (rt.contains("assemble")) {    //only rev. build and code numbers for assemble tasks
                b_isassemble = true
                vBuild++
                if (rt.contains("Debug_proguard")) {
                    println "assemble_type is: debug_proguard"
                    assemble_type = "debug_proguard"
                } else if (rt.contains("Debug")) {
                    println "assemble_type is: debug"
                    assemble_type = "debug"
                } else if (rt.contains("Release")) {
                    println "assemble_type is: release"
                    assemble_type = "release"
                }
            }
        }
        vName = vMajor + "." + vMinor + "." + vSubMinor + "." + vBuild
        versionProps['VERSION_CODE'] = vCode.toString()
        versionProps['VERSION_MAJOR'] = vMajor.toString()
        versionProps['VERSION_MINOR'] = vMinor.toString()
        versionProps['VERSION_SUBMINOR'] = vSubMinor.toString()
        versionProps['VERSION_BUILD'] = vBuild.toString()

        if (b_isassemble)
            project.logger.lifecycle("Assembling new " + assemble_type + " version " + vName.toString())
    } else
        throw new GradleException("Could not read version.properties!")

    //mbgl props dictates various aspects of build configs so we parse/validate it first
    def mbglPropsFile = file('mbgl.properties')
    Properties mbglProps
    String mbglapi_access_token
    Integer mbgl_http_max_requests_per_host
    Integer mbgl_http_connect_timeout
    Integer mbgl_http_read_timeout
    Integer mbgl_http_cache_size
    String mbgl_default_remote_mvt_server_url
    Boolean mbgl_debug_active
    if (mbglPropsFile.canRead()) {
        mbglProps = new Properties()
        mbglProps.load(new FileInputStream(mbglPropsFile))

        //REQUIRED PARAMS
        mbglapi_access_token = mbglProps['api_access_token']
        if (mbglapi_access_token == null)
            throw new GradleException("failed read: mbgl.properties 'api_access_token' value is required")
        if (mbglapi_access_token.compareTo("YOUR_MAPBOX_API_ACCESS_TOKEN") == 0 || mbglapi_access_token.trim().isEmpty())
            throw new GradleException("mbgl.properties 'api_access_token' value not set! Please visit https://www.mapbox.com/account/access-tokens/ to create one and then set it in mbgl.properties file")
        println "mbglapi_access_token non-null/non-empty check: PASS"
        String s_mbgl_http_connect_timeout = mbglProps['http_connect_timeout']
        if (s_mbgl_http_connect_timeout == null)
            throw new GradleException("failed read: mbgl.properties 'http_connect_timeout' value is required")
        mbgl_http_connect_timeout = Integer.valueOf(s_mbgl_http_connect_timeout)
        String s_mbgl_http_max_requests_per_host = mbglProps['http_max_requests_per_host']
        if (s_mbgl_http_max_requests_per_host == null)
            throw new GradleException("failed read: mbgl.properties 'http_max_requests_per_host' value is required")
        mbgl_http_max_requests_per_host = Integer.valueOf(s_mbgl_http_max_requests_per_host)
        String s_mbgl_http_read_timeout = mbglProps['http_read_timeout']
        if (s_mbgl_http_read_timeout == null)
            throw new GradleException("failed read: mbgl.properties 'http_read_timeout' value is required")
        mbgl_http_read_timeout = Integer.valueOf(s_mbgl_http_read_timeout)
        String s_mbgl_http_cache_size = mbglProps['http_cache_size']
        if (s_mbgl_http_cache_size == null)
            throw new GradleException("failed read: mbgl.properties 'http_cache_size' value is required")
        mbgl_http_cache_size = Integer.valueOf(s_mbgl_http_cache_size)

        //OPTIONAL PARAMS
        mbgl_default_remote_mvt_server_url = mbglProps['default_remote_mvt_server_url']
        if (mbgl_default_remote_mvt_server_url == null)
            mbgl_default_remote_mvt_server_url = ""
        String s_mbgl_debug_active = mbglProps['debug_active']
        mbgl_debug_active = s_mbgl_debug_active != null ? Boolean.valueOf(s_mbgl_debug_active) : false
    } else
        throw new GradleException("Could not read mbgl.properties!")

    def base_archive_name = "tegolamobile"
    defaultConfig {
        applicationId "go_spatial.com.github.tegola.mobile.android.ux"
        versionCode vCode
        versionName vName
        archivesBaseName = base_archive_name
        minSdkVersion 16
        targetSdkVersion 27
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "mbglapi_access_token", "\"" + mbglapi_access_token + "\""
        buildConfigField "int", "mbgl_http_max_requests_per_host", mbgl_http_max_requests_per_host.toString()
        buildConfigField "int", "mbgl_http_connect_timeout", mbgl_http_connect_timeout.toString()
        buildConfigField "int", "mbgl_http_read_timeout", mbgl_http_read_timeout.toString()
        buildConfigField "int", "mbgl_http_cache_size", mbgl_http_cache_size.toString()
        buildConfigField "String", "mbgl_default_remote_mvt_server_url", "\"" + mbgl_default_remote_mvt_server_url + "\""
        buildConfigField "boolean", "mbgl_debug_active", mbgl_debug_active.toString()
    }

    buildTypes {
        release {
            buildConfigField "boolean", "mbgl_debug_active", "false"
            debuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            minifyEnabled false
            shrinkResources false
        }
        debug_proguard {
            initWith debug
            signingConfig signingConfigs.debug
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.debug.pro'
            matchingFallbacks = ['debug', 'release']
        }
    }

    productFlavors {
    }

    //Map for the version code that gives each ABI a value.
    def abiCodes = ['armeabi':1, 'armeabi-v7a':2, 'arm64-v8a':3, 'x86':4, 'x86_64':5]
    splits {
        // Configures multiple APKs based on ABI for release builds
        abi {
            def isReleaseBuild = false

            gradle.startParameter.taskNames.find {
                // Enable split for release builds in different build flavors
                // (assemblePaidRelease, assembleFreeRelease, etc.).
                if (it.matches(".*:assemble.*Release")) {
                    println "ABI filter for release build is enabled"
                    isReleaseBuild = true
                    return true // break
                }

                return false // continue
            }

            // Enables building multiple APKs per ABI.
            enable isReleaseBuild

            // By default all ABIs are included, so use reset() and include to specify that we only
            // want APKs for x86, armeabi-v7a, and mips.
            reset()

            // Specifies a list of ABIs that Gradle should create APKs for.
            include "armeabi", "armeabi-v7a", "arm64-v8a", "x86", "x86_64"

            // Specifies that we want to also generate a universal APK that includes all ABIs.
            universalApk true
        }
    }

    //if we're here, everything else has gone right... update version props file
    versionProps.store(versionPropsFile.newWriter(), null)

    //and now set final apk filename...
    applicationVariants.all { variant ->
        variant.outputs.all {
            output ->
                String apkfilename
                if (variant.buildType.name.contains("release")) {
                    // assigns a different version code based on ABI - e.g. if vCode is 12 (from version.properties), then, for ABI armeabi-v7a, output.versionCodeOverride will be 200012
                    def abiName = output.getFilter(com.android.build.OutputFile.ABI)
                    output.versionCodeOverride = abiCodes.get(abiName, 0) * 100000 + variant.versionCode
                    apkfilename = base_archive_name + "-" + vName + "-" + (abiName != null ? abiName + "-" : "") + variant.buildType.name + ".apk"
                } else
                    apkfilename = base_archive_name + "-" + vName + "-" + variant.buildType.name + ".apk"
                outputFileName = apkfilename
        }
    }
}

dependencies {
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation 'junit:junit:4.12'

    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation 'com.android.support:support-v4:27.1.1'
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.0'

    implementation project(':TMControllerSvc')

    //see https://github.com/AAkira/ExpandableLayout
    implementation 'com.github.aakira:expandable-layout:1.6.0@aar'
    //locally compiled version of forked https://github.com/iPaulPro/aFileChooser
    implementation(name: 'lib-aFileChooser-release', ext: 'aar') {
        transitive = true;
    }
    //only import Google Drive API vs. the entire Google Play Services bundle
    //implementation 'com.google.android.gms:play-services-drive:11.0.4'
    implementation 'com.squareup.okhttp3:okhttp:3.10.0'
    implementation 'com.mapbox.mapboxsdk:mapbox-android-sdk:6.1.3'
}

repositories {
    flatDir {
        dirs 'libs'
    }
}
